{"version":3,"names":["NativeModules","Platform","processColor","NavigationBar","navigationHide","OS","navigationShow","leanBack","immersive","stickyImmersive","lowProfile","getBarModeTypes","style","bar","modeStyle","LIGHT","DARK","NO_MODE","mode","NAVIGATION_BAR","STATUS_BAR","NAVIGATION_BAR_STATUS_BAR","setBarMode","setNavigationColor","color","setNavigationBarDividerColor","setNavigationBarContrastEnforced","enforceContrast","fullScreen","enable","SystemNavigationBar"],"sources":["index.tsx"],"sourcesContent":["import { NativeModules, Platform, processColor } from 'react-native';\n\nconst { NavigationBar } = NativeModules;\n\nconst navigationHide = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationHide();\n  }\n};\n\nconst navigationShow = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.navigationShow();\n  }\n};\n\nconst leanBack = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.leanBack();\n  }\n};\n\nconst immersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.immersive();\n  }\n};\n\nconst stickyImmersive = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.stickyImmersive();\n  }\n};\n\nconst lowProfile = async () => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.lowProfile();\n  }\n};\n\nconst getBarModeTypes = (\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  const modeStyle =\n    style === 'light'\n      ? NavigationBar.LIGHT\n      : style === 'dark'\n      ? NavigationBar.DARK\n      : NavigationBar.NO_MODE;\n\n  const mode =\n    bar === 'navigation'\n      ? NavigationBar.NAVIGATION_BAR\n      : bar === 'status'\n      ? NavigationBar.STATUS_BAR\n      : NavigationBar.NAVIGATION_BAR_STATUS_BAR;\n\n  return {\n    modeStyle,\n    mode,\n  };\n};\n\nconst setBarMode = async (\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  if (Platform.OS === 'android') {\n    const { modeStyle, mode } = getBarModeTypes(style, bar);\n    return await NavigationBar.setBarMode(modeStyle, mode);\n  }\n};\n\nconst setNavigationColor = async (\n  color: string | number,\n  style?: 'light' | 'dark',\n  bar?: 'navigation' | 'status' | 'both'\n) => {\n  if (Platform.OS === 'android') {\n    const { modeStyle, mode } = getBarModeTypes(style, bar);\n    return await NavigationBar.setNavigationColor(\n      processColor(color),\n      color === 'translucent',\n      modeStyle,\n      mode\n    );\n  }\n};\n\nconst setNavigationBarDividerColor = async (color: string | number) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarDividerColor(\n      processColor(color)\n    );\n  }\n};\n\nconst setNavigationBarContrastEnforced = async (enforceContrast?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.setNavigationBarContrastEnforced(\n      enforceContrast || false\n    );\n  }\n};\n\nconst fullScreen = async (enable?: boolean) => {\n  if (Platform.OS === 'android') {\n    return await NavigationBar.fullScreen(enable || false);\n  }\n};\n\nvar SystemNavigationBar = {\n  navigationHide,\n  navigationShow,\n  leanBack,\n  immersive,\n  stickyImmersive,\n  lowProfile,\n  setBarMode,\n  setNavigationColor,\n  setNavigationBarDividerColor,\n  setNavigationBarContrastEnforced,\n  fullScreen,\n};\n\nexport default SystemNavigationBar;\n"],"mappings":"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"}